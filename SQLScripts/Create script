USE eksamensprojekt_bilabonnement_intellij_kingz;


CREATE TABLE gas_cars (
chassis_number VARCHAR (25) NOT NULL PRIMARY KEY, license_plate_number VARCHAR(7) NOT NULL,
brand VARCHAR(50) NOT NULL, model VARCHAR (60) NOT NULL, registration_fee DOUBLE NOT NULL,
price DOUBLE NOT NULL, car_state ENUM('RENTED', 'DAMAGED', 'AVAILABLE', 'UNDER_MAINTENANCE'  ) NOT NULL,
transmission_type ENUM('MANUAL', 'AUTOMATIC') NOT NULL, km_per_liter DOUBLE NOT NULL,
fuel_type ENUM( "GAS", "DIESEL" ) NOT NULL, carbon_emission_per_km DOUBLE NOT NULL, image_url VARCHAR(255));
INSERT INTO gas_cars (chassis_number, license_plate_number, registration_fee, price, car_state, transmission_type, km_per_liter, fuel_type, carbon_emission_per_km, image_url, mileage, rating) VALUES
('ABC123456789', 'XYZ123', 2000, 15000, 'AVAILABLE', 'AUTOMATIC', 15, 'GAS', 0.2, 'https://i.imgur.com/DGKTJnC.jpeg', 19000, 20),
('BCD456789123', 'BCD456', 155, 20500, 'DAMAGED', 'MANUAL', 12.8, 'GAS', 0.17, 'https://i.imgur.com/jRxoULh.png', 290, 16),
('DEF987654321', 'ABC456', 1800, 17000, 'GETTING_PREPARED', 'MANUAL', 14, 'GAS', 0.25, 'https://i.imgur.com/7bzyjdB.jpeg', 290, 21),
('GHI456789012', 'JKL789', 2200, 16000, 'GETTING_PREPARED', 'MANUAL', 16, 'GAS', 0.18, 'https://i.imgur.com/ANqk0XE.jpeg', 290, 7),
('PQR987654321', 'PQR987', 165, 21500, 'RENTED', 'AUTOMATIC', 12.3, 'GAS', 0.14, 'https://i.imgur.com/D6oZun2.jpeg', 290, 1),
('STU654321987', 'STU654', 175, 22500, 'GETTING_PREPARED', 'MANUAL', 11.5, 'GAS', 0.15, 'https://i.imgur.com/Fof7gkK.jpeg', 290, 6),
('VWX321987654', 'VWX321', 160, 21000, 'GETTING_PREPARED', 'AUTOMATIC', 13, 'GAS', 0.16, 'https://i.imgur.com/N4nSceO.jpeg', 290, 3),
('YZA789123456', 'YZA789', 170, 22000, 'GETTING_PREPARED', 'AUTOMATIC', 11.9, 'GAS', 0.13, 'https://i.imgur.com/K10cXhV.jpeg', 290, 22);


DESCRIBE gas_cars;
CREATE TABLE electric_cars (
chassis_number VARCHAR (25) NOT NULL PRIMARY KEY, license_plate_number VARCHAR(7) NOT NULL,
brand VARCHAR(50) NOT NULL, model VARCHAR (60) NOT NULL, registration_fee DOUBLE NOT NULL,
price DOUBLE NOT NULL, car_state ENUM('RENTED', 'DAMAGED', 'AVAILABLE', 'UNDER_MAINTENANCE'  ) NOT NULL,
transmission_type ENUM('MANUAL', 'AUTOMATIC') NOT NULL, km_per_charge DOUBLE NOT NULL);

CREATE TABLE gas_vans (
chassis_number VARCHAR (25) NOT NULL PRIMARY KEY, license_plate_number VARCHAR(7) NOT NULL,
brand VARCHAR(50) NOT NULL, model VARCHAR (60) NOT NULL, registration_fee DOUBLE NOT NULL,
price DOUBLE NOT NULL, car_state ENUM('RENTED', 'DAMAGED', 'AVAILABLE', 'UNDER_MAINTENANCE' ) NOT NULL,
transmission_type ENUM('MANUAL', 'AUTOMATIC') NOT NULL, km_per_liter DOUBLE NOT NULL,
fuel_type ENUM( "GAS", "DIESEL" ) NOT NULL,
carbon_emission_per_km DOUBLE NOT NULL, floor_length_in_mm INT NOT NULL,
 max_height_in_mm INT NOT NULL, max_width_in_mm INT NOT NULL);




CREATE TABLE electric_vans (
chassis_number VARCHAR (25) NOT NULL PRIMARY KEY, license_plate_number VARCHAR(7) NOT NULL,
brand VARCHAR(50) NOT NULL, model VARCHAR (60) NOT NULL, registration_fee DOUBLE NOT NULL,
price DOUBLE NOT NULL, car_state ENUM('RENTED', 'DAMAGED', 'AVAILABLE', 'UNDER_MAINTENANCE'  ) NOT NULL,
transmission_type ENUM('MANUAL', 'AUTOMATIC') NOT NULL, km_per_charge DOUBLE NOT NULL, floor_length_in_mm INT NOT NULL, max_height_in_mm INT NOT NULL, max_width_in_mm INT NOT NULL);

 CREATE TABLE all_cars (
 chassis_number VARCHAR (25) NOT NULL PRIMARY KEY);

CREATE TABLE damages (
    damage_id INT AUTO_INCREMENT PRIMARY KEY,
    chassis_number VARCHAR(25) NOT NULL,
    damage_name VARCHAR(255) NOT NULL,
    damage_price DOUBLE NOT NULL,
    invoiced BOOLEAN DEFAULT FALSE NOT NULL,
    condition_report_id INT,
    FOREIGN KEY (chassis_number) REFERENCES all_cars(chassis_number),
    FOREIGN KEY (condition_report_id) REFERENCES condition_reports(condition_report_id)
);

CREATE TABLE condition_reports (
	condition_report_id INT AUTO_INCREMENT PRIMARY KEY,
    chassis_number VARCHAR(25) NOT NULL,
    total_extra_cost DOUBLE,
    km_before_lease DOUBLE NOT NULL,
    km_after_lease DOUBLE,
    lease_id INT NOT NULL,
    FOREIGN KEY (chassis_number) REFERENCES all_cars(chassis_number),
    FOREIGN KEY (lease_id) REFERENCES lease_agreements(lease_id)
    );


CREATE TABLE employees (employee_id INT auto_increment PRIMARY KEY NOT NULL,
employee_type ENUM('ADMIN', 'DAMAGE_MANAGEMENT', 'LEASE_REGISTRATION', 'BUSINESS_DEVELOPER') NOT NULL,
email VARCHAR(200) UNIQUE  NOT NULL, password VARCHAR(64) NOT NULL ) ;

CREATE TABLE customers (customer_id INT auto_increment PRIMARY KEY NOT NULL, first_name VARCHAR(70) NOT NULL,
 last_name VARCHAR(70)NOT NULL, phone_number INT NOT NULL, email VARCHAR(200) UNIQUE NOT NULL,
 address VARCHAR(200) NOT NULL );

CREATE TABLE lease_agreements ( lease_id INT auto_increment PRIMARY KEY, chassis_number VARCHAR (25) NOT NULL,
customer_id INT NOT NULL, terms VARCHAR(500) NOT NULL,   FOREIGN KEY  (chassis_number) REFERENCES all_cars(chassis_number),
FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ) ;

insert into employees (employee_type, email, password)
values ('ADMIN', 'test123@gmail.com', '123');

UPDATE lease_agreements SET is_concluded = FALSE WHERE chassis_number = 'ABC123456789';

CREATE OR REPLACE VIEW all_cars_view AS
SELECT
    ac.chassis_number,
    COALESCE(ec.license_plate_number, gc.license_plate_number, ev.license_plate_number, gv.license_plate_number) AS license_plate_number,
    COALESCE(b.brand_name, b_gc.brand_name, b_ev.brand_name, b_gv.brand_name) AS brand,
    COALESCE(m.model_name, m_gc.model_name, m_ev.model_name, m_gv.model_name) AS model,
    COALESCE(ec.transmission_type, gc.transmission_type, ev.transmission_type, gv.transmission_type) AS transmission_type,
    COALESCE(ec.registration_fee, gc.registration_fee, ev.registration_fee, gv.registration_fee) AS registration_fee,
    COALESCE(ec.car_state, gc.car_state, ev.car_state, gv.car_state) AS car_state,
    COALESCE(ec.price, gc.price, ev.price, gv.price) AS price,
    COALESCE(ec.image_url, gc.image_url, ev.image_url, gv.image_url) AS image_url,
    COALESCE(ec.km_driven, gc.km_driven, ev.km_driven, gv.km_driven) AS km_driven
FROM
    all_cars ac
LEFT JOIN electric_cars ec ON ec.chassis_number = ac.chassis_number
LEFT JOIN gas_cars gc ON gc.chassis_number = ac.chassis_number
LEFT JOIN electric_vans ev ON ev.chassis_number = ac.chassis_number
LEFT JOIN gas_vans gv ON gv.chassis_number = ac.chassis_number

LEFT JOIN brands b ON b.brand_id = ec.brand_id
LEFT JOIN brands b_gc ON b_gc.brand_id = gc.brand_id
LEFT JOIN brands b_ev ON b_ev.brand_id = ev.brand_id
LEFT JOIN brands b_gv ON b_gv.brand_id = gv.brand_id

LEFT JOIN models m ON m.model_id = ec.model_id AND m.brand_id = ec.brand_id
LEFT JOIN models m_gc ON m_gc.model_id = gc.model_id AND m_gc.brand_id = gc.brand_id
LEFT JOIN models m_ev ON m_ev.model_id = ev.model_id AND m_ev.brand_id = ev.brand_id
LEFT JOIN models m_gv ON m_gv.model_id = gv.model_id AND m_gv.brand_id = gv.brand_id;

insert into employees (employee_type, email, password)
values ('ADMIN', 'test123@gmail.com', '123');
describe gas_cars;
INSERT INTO customers (first_name, last_name, phone_number, email, address)
VALUES
('John', 'Doe', 67890, 'john.doe@example.com', '123 Main St, City, Country'),
('Jane', 'Smith', 543210, 'jane.smith@example.com', '456 Elm St, City, Country'),
('Michael', 'Johnson', 534567, 'michael.johnson@example.com', '789 Oak St, City, Country'),
('Emily', 'Brown', 999877, 'emily.brown@example.com', '321 Pine St, City, Country'),
('David', 'Wilson', 1112333, 'david.wilson@example.com', '654 Birch St, City, Country'),
('Sarah', 'Miller', 2223344, 'sarah.miller@example.com', '987 Maple St, City, Country');




 CREATE TABLE change_logs (log_id INT AUTO_INCREMENT PRIMARY KEY, changed_by VARCHAR(255) NOT NULL,
action_type ENUM('INSERT', 'UPDATE', 'DELETE') NOT NULL,
table_changed ENUM('CUSTOMERS','ELECTRIC_VANS ','EMPLOYEES','ELECTRIC_CARS','GAS_CARS','GAS_VANS') NOT NULL,
change_ VARCHAR(255) NOT NULL, timestamped DATETIME DEFAULT CURRENT_TIMESTAMP);

ALTER TABLE all_cars
MODIFY car_table ENUM('ELECTRIC_VANS ','ELECTRIC_CARS','GAS_CARS','GAS_VANS')NOT NULL;

ALTER TABLE customers DROP INDEX email;

SELECT l.customer_id -- repo method
FROM lease_agreements l
WHERE l.end_date <= CURRENT_TIMESTAMP - INTERVAL 5 YEAR;

ALTER TABLE all_cars
ADD CONSTRAINT fk_chassis_number
FOREIGN KEY (chassis_number) REFERENCES gas_vans(chassis_number);

SELECT a.chassis_number FROM lease_agreements l JOIN all_cars a ON l.chassis_number = a.chassis_number
WHERE l.start_date BETWEEN CURRENT_TIMESTAMP AND (CURRENT_TIMESTAMP + INTERVAL 24 HOUR); -- repo method

ALTER TABLE lease_agreements
ADD CONSTRAINT fk_chassis_number
FOREIGN KEY (chassis_number) REFERENCES all_cars(chassis_number);

ALTER TABLE gas_cars
ADD CONSTRAINT fk_gas_cars_all_cars_chassis_number
FOREIGN KEY (chassis_number) REFERENCES all_cars(chassis_number)
	ON DELETE CASCADE
    ON UPDATE CASCADE;

CREATE TABLE all_cars(
    id INT AUTO_INCREMENT PRIMARY KEY,
    chassis_number VARCHAR(25) NOT NULL UNIQUE,
    car_table ENUM('ELECTRIC_VANS', 'ELECTRIC_CARS','GAS_CARS','GAS_VANS') NOT NULL
);

ALTER TABLE electric_cars DROP FOREIGN KEY fk_all_cars_chassis_number;

ALTER TABLE electric_cars
ADD UNIQUE (chassis_number);



ALTER TABLE gas_cars
ADD CONSTRAINT fk_chassis_number
FOREIGN KEY (chassis_number) REFERENCES gas_vans(chassis_number);


Triggers:

Customers:
DELIMITER $$

CREATE TRIGGER format_customers_before_insert
BEFORE INSERT ON customers
FOR EACH ROW
BEGIN
	SET NEW.first_name = CONCAT(UPPER(LEFT(TRIM(NEW.first_name), 1)), LOWER(SUBSTRING(TRIM(NEW.first_name), 2)));
    SET NEW.last_name = CONCAT(UPPER(LEFT(TRIM(NEW.last_name), 1)), LOWER(SUBSTRING(TRIM(NEW.last_name), 2)));
    SET NEW.email = TRIM(NEW.email);
    SET NEW.address = CONCAT(UPPER(LEFT(TRIM(NEW.address), 1)), LOWER(SUBSTRING(TRIM(NEW.address), 2)));
END$$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER update_log_after_customers_inserted
AFTER INSERT ON customers
FOR EACH ROW
BEGIN
    INSERT INTO change_logs (changed_by, action_type, table_changed, change_)
    VALUES (USER(), 'INSERT', 'CUSTOMERS', CONCAT('ID: ', NEW.costumer_id, ' - ', NEW.first_name, ' ', NEW.last_name));
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER update_log_after_customers_updated
AFTER UPDATE ON customers
FOR EACH ROW
BEGIN
    DECLARE old_first_name VARCHAR(255);
	DECLARE new_last_name VARCHAR(255);
    DECLARE old_last_name VARCHAR(255);
    DECLARE old_phone_number VARCHAR(255);
    DECLARE old_email VARCHAR(255);
    DECLARE old_address VARCHAR(255);

    SET old_first_name = OLD.first_name;
    SET new_last_name = NEW.last_name;
    SET old_last_name = OLD.last_name;
    SET old_phone_number = OLD.phone_number;
    SET old_email = OLD.email;
    SET old_address = OLD.address;

    IF OLD.first_name <> NEW.first_name OR OLD.last_name <> NEW.last_name THEN
        IF NEW.first_name = 'Anonymous' THEN
            SET old_first_name = 'Anonymous';
        END IF;
        IF NEW.last_name = 'Anonymous' THEN
			SET new_last_name = '';
            SET old_last_name = '';
        END IF;
        INSERT INTO change_logs (changed_by, action_type, table_changed, change_)
        VALUES (USER(), 'UPDATE', 'CUSTOMERS',
            CONCAT('Name: ', old_first_name, ' ', old_last_name, ' -> ', NEW.first_name, ' ', new_last_name));
    END IF;

    IF OLD.phone_number <> NEW.phone_number THEN
        IF NEW.phone_number = '00000000' THEN
            SET old_phone_number = '00000000';
        END IF;
        IF NOT (old_phone_number = '00000000' AND NEW.phone_number = '00000000') THEN
            INSERT INTO change_logs (changed_by, action_type, table_changed, change_)
            VALUES (USER(), 'UPDATE', 'CUSTOMERS', CONCAT('Phone: ', old_phone_number, ' -> ', NEW.phone_number));
        END IF;
    END IF;

    IF OLD.email <> NEW.email THEN
        IF NEW.email = 'Anonymized' THEN
            SET old_email = 'Anonymized';
        END IF;
        IF NOT (old_email = 'Anonymized' AND NEW.email = 'Anonymized') THEN
            INSERT INTO change_logs (changed_by, action_type, table_changed, change_)
            VALUES (USER(), 'UPDATE', 'CUSTOMERS', CONCAT('Mail: ', old_email, ' -> ', NEW.email));
        END IF;
    END IF;

    IF OLD.address <> NEW.address THEN
        IF NEW.address = 'Anonymized' THEN
            SET old_address = 'Anonymized';
        END IF;
        IF NOT (old_address = 'Anonymized' AND NEW.address = 'Anonymized') THEN
            INSERT INTO change_logs (changed_by, action_type, table_changed, change_)
            VALUES (USER(), 'UPDATE', 'CUSTOMERS', CONCAT('Address: ', old_address, ' -> ', NEW.address));
        END IF;
    END IF;
END $$

DELIMITER ;


Employees:
DELIMITER $$

CREATE TRIGGER format_employees_before_insert
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
    SET NEW.email = TRIM(NEW.email);
    SET NEW.password = TRIM(NEW.password);
END$$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER update_log_after_employees_inserted
AFTER INSERT ON employees FOR EACH ROW
BEGIN
        INSERT INTO change_logs (changed_by, action_type, table_changed, change_)
        VALUES (USER(), 'INSERT', 'EMPLOYEES', NEW.email);
END$$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER update_log_after_employees_updated
AFTER UPDATE ON employees FOR EACH ROW
BEGIN
	IF OLD.email <> NEW.email THEN
        INSERT INTO change_logs (changed_by, action_type, table_changed, change_)
        VALUES (USER(), 'UPDATE', 'EMPLOYEES', CONCAT('Mail: ', OLD.email, ' -> ', NEW.email));
    END IF;

    IF OLD.password <> NEW.password THEN
        INSERT INTO change_logs (changed_by, action_type, table_changed, change_)
        VALUES (USER(), 'UPDATE', 'EMPLOYEES', CONCAT('Pass: ', OLD.password, ' -> ', NEW.password));
    END IF;

    IF OLD.employee_type <> NEW.employee_type THEN
		INSERT INTO change_logs (changed_by, action_type, table_changed, change_)
		VALUES (USER(), 'UPDATE', 'EMPLOYEES', CONCAT('Type: ', OLD.employee_type, ' -> ', NEW.employee_type));
	END IF;
END$$

DELIMITER;



DELIMITER $$

CREATE TRIGGER update_lease_agreements_when_electric_car_lease_start
AFTER UPDATE ON electric_cars
FOR EACH ROW
BEGIN
    IF NEW.car_state = 'GETTING_PREPARED' AND OLD.car_state <> NEW.car_state THEN
        UPDATE lease_agreements
        SET is_active = TRUE
        WHERE chassis_number = NEW.chassis_number;
    END IF;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER update_lease_agreements_when_gas_car_lease_start
AFTER UPDATE ON gas_cars
FOR EACH ROW
BEGIN
    IF NEW.car_state = 'GETTING_PREPARED' AND OLD.car_state <> NEW.car_state THEN
        UPDATE lease_agreements
        SET is_active = TRUE
        WHERE chassis_number = NEW.chassis_number;
    END IF;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER update_lease_agreements_when_electric_vans_lease_start
AFTER UPDATE ON electric_vans
FOR EACH ROW
BEGIN
    IF NEW.car_state = 'GETTING_PREPARED' AND OLD.car_state <> NEW.car_state THEN
        UPDATE lease_agreements
        SET is_active = TRUE
        WHERE chassis_number = NEW.chassis_number;
    END IF;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER update_lease_agreements_when_gas_vans_lease_start
AFTER UPDATE ON gas_vans
FOR EACH ROW
BEGIN
    IF NEW.car_state = 'GETTING_PREPARED' AND OLD.car_state <> NEW.car_state THEN
        UPDATE lease_agreements
        SET is_active = TRUE
        WHERE chassis_number = NEW.chassis_number;
    END IF;
END $$

DELIMITER ;

INSERT INTO brands (brand_name) VALUES
('Toyota'),
('Ford'),
('Honda'),
('Chevrolet'),
('Mercedes-Benz'),
('BMW'),
('Volkswagen'),
('Nissan'),
('Audi'),
('Hyundai'),
('Kia'),
('Porsche'),
('Lexus'),
('Jaguar'),
('Land Rover'),
('Subaru'),
('Mazda'),
('Tesla'),
('Fiat'),
('Peugeot'),
('Renault'),
('Volvo'),
('Mitsubishi'),
('Skoda'),
('Infiniti');

INSERT INTO models (brand_id, name) VALUES
-- Toyota Models
(1, 'Corolla'),
(1, 'Camry'),
(1, 'Prius'),
(1, 'Land Cruiser'),

-- Ford Models
(2, 'F-150'),
(2, 'Mustang'),
(2, 'Explorer'),
(2, 'Fiesta'),

-- Honda Models
(3, 'Civic'),
(3, 'Accord'),
(3, 'CR-V'),
(3, 'Pilot'),

-- Chevrolet Models
(4, 'Silverado'),
(4, 'Malibu'),
(4, 'Impala'),
(4, 'Camaro'),

-- Mercedes-Benz Models
(5, 'C-Class'),
(5, 'E-Class'),
(5, 'S-Class'),
(5, 'GLE'),

-- BMW Models
(6, '3 Series'),
(6, '5 Series'),
(6, 'X5'),
(6, 'X3'),

-- Volkswagen Models
(7, 'Golf'),
(7, 'Passat'),
(7, 'Tiguan'),
(7, 'Jetta'),

-- Nissan Models
(8, 'Altima'),
(8, 'Maxima'),
(8, 'Rogue'),
(8, 'Leaf'),

-- Audi Models
(9, 'A4'),
(9, 'A6'),
(9, 'Q5'),
(9, 'Q7'),

-- Hyundai Models
(10, 'Elantra'),
(10, 'Sonata'),
(10, 'Tucson'),
(10, 'Santa Fe'),

-- Kia Models
(11, 'Optima'),
(11, 'Sorento'),
(11, 'Sportage'),
(11, 'Soul'),

-- Porsche Models
(12, '911'),
(12, 'Cayenne'),
(12, 'Panamera'),
(12, 'Macan'),

-- Lexus Models
(13, 'RX'),
(13, 'ES'),
(13, 'IS'),
(13, 'NX'),

-- Jaguar Models
(14, 'XE'),
(14, 'XF'),
(14, 'F-Pace'),
(14, 'E-Pace'),

-- Land Rover Models
(15, 'Range Rover'),
(15, 'Discovery'),
(15, 'Evoque'),
(15, 'Defender'),

-- Subaru Models
(16, 'Outback'),
(16, 'Forester'),
(16, 'Impreza'),
(16, 'Legacy'),

-- Mazda Models
(17, 'Mazda3'),
(17, 'Mazda6'),
(17, 'CX-5'),
(17, 'CX-9'),

-- Tesla Models
(18, 'Model S'),
(18, 'Model 3'),
(18, 'Model X'),
(18, 'Model Y'),

-- Fiat Models
(19, '500'),
(19, 'Panda'),
(19, 'Punto'),
(19, 'Tipo'),

-- Peugeot Models
(20, '208'),
(20, '308'),
(20, '508'),
(20, '3008'),

-- Renault Models
(21, 'Clio'),
(21, 'Megane'),
(21, 'Kadjar'),
(21, 'Captur'),

-- Volvo Models
(22, 'XC90'),
(22, 'S60'),
(22, 'V60'),
(22, 'XC40'),

-- Mitsubishi Models
(23, 'Outlander'),
(23, 'Lancer'),
(23, 'Pajero'),
(23, 'Eclipse Cross'),

-- Skoda Models
(24, 'Octavia'),
(24, 'Superb'),
(24, 'Kodiaq'),
(24, 'Fabia'),

-- Infiniti Models
(25, 'Q50'),
(25, 'QX60'),
(25, 'QX50'),
(25, 'QX80');










